import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button, StyleSheet, ScrollView } from 'react-native';

const AdminScreen = ({ navigation }) => {
  const [isFormValid, setIsFormValid] = useState(false);
  const [dataStock, setDataStock] = useState([]);

  const [stockData, setStockData] = useState({
    productName: '',
    quantity: '',
    price: '',
  });

  useEffect(() => {
    fetchStockData();
  }, []);

  const fetchStockData = async () => {
    try {
      const response = await fetch('http://192.168.1.7:5000/stocks');
      if (response.ok) {
        const data = await response.json();
        setDataStock(data);
      } else {
        console.error('Failed to fetch stock data');
      }
    } catch (error) {
      console.error('Failed to connect to server:', error);
    }
  };

  const handleStock = async () => {
    try {
      const response = await fetch('http://192.168.1.7:5000/AddStock', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(stockData),
      });

      if (response.ok) {
        console.log('Stock added successfully');
        fetchStockData();
        setStockData({
          productName: '',
          quantity: '',
          price: '',
        });
      } else {
        const errorResponse = await response.json();
        console.error('Failed to add stock:', errorResponse.error);
      }
    } catch (error) {
      console.error('Failed to connect to server:', error);
    }
  };

  const handleStockChange = (field, value) => {
    setStockData((prevData) => ({ ...prevData, [field]: value }));

    const { productName, quantity, price } = stockData;
    setIsFormValid(productName !== '' && quantity !== '' && price !== '');
  };

  const handleLogout = () => {
    navigation.replace('Login');
  };

  return (
    <View style={styles.container}>
      <View style={styles.navbar}>
        <Text style={styles.navbarTitle}>Admin Panel</Text>
        <Button title="Add Users" onPress={() => handleFormChange('users')} />
        <Button title="Add Missions" onPress={() => handleFormChange('missions')} />
        <Button title="Add Stock" onPress={() => handleFormChange('stock')} />
        <Button title="Logout" onPress={handleLogout} />
      </View>
      <ScrollView contentContainerStyle={styles.content}>
      <View style={styles.content}>
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Add Stock</Text>
          <TextInput
            style={styles.input}
            placeholder="Product Name"
            value={stockData.productName}
            onChangeText={(text) => handleStockChange('productName', text)}
          />
          <TextInput
            style={styles.input}
            placeholder="Quantity"
            keyboardType="numeric"
            value={stockData.quantity}
            onChangeText={(text) => handleStockChange('quantity', text)}
          />
          <TextInput
            style={styles.input}
            placeholder="Price"
            keyboardType="numeric"
            value={stockData.price}
            onChangeText={(text) => handleStockChange('price', text)}
          />
          <Button title="Submit" onPress={handleStock} disabled={!isFormValid} />
        </View>
        {/* Display stock data */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Stock Data</Text>
          {dataStock.map((stock, index) => (
            <View key={index} style={styles.stockItem}>
              <Text>Product Name: <Text>{stock.productName}</Text></Text>
              <Text>Quantity: <Text>{stock.quantity}</Text></Text>
              <Text>Price: <Text>{stock.price}</Text></Text>
            </View>
          ))}
        </View>
      </View>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  navbar: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingTop: 16,
    paddingBottom: 8,
    backgroundColor: '#f2f2f2',
  },
  navbarTitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  section: {
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 4,
    padding: 8,
    marginBottom: 8,
  },
  stockItem: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 4,
    padding: 8,
    marginBottom: 8,
  },
});

export default AdminScreen;